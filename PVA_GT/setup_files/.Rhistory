library(unmarked)
library(unmarked)
?pcount
# Simulate data
set.seed(35)
nSites <- 24
nVisits <- 3
x <- rnorm(nSites)               # a site-level covariate
x
# Simulate dara from known model
beta0 <- 0
lambda <- exp(beta0 + beta1*x)   # expected counts at each site
# Simulate dara from known model
beta0 <- 0    # intercept
beta1 <- 1    # slope of covar relationship
lambda <- exp(beta0 + beta1*x)   # expected counts at each site
N <- rpois(nSites, lambda)       # latent abundance
N
# observations: imperfect rep of true abund
y <- matrix(NA, nSites, nVisits)
p <- c(0.3, 0.6, 0.8)            # detection prob for each visit
for(j in 1:nVisits) {
y[,j] <- rbinom(nSites, N, p[j])
}
y
N
as.character(1:nVisits)
nSites
# Organize data
visitMat <- matrix(as.character(1:nVisits), nSites, nVisits, byrow=TRUE)
visitMat
list(visit=visitMat)
y
data.frame(x=x)
umf <- unmarkedFramePCount(y=y, siteCovs=data.frame(x=x),
obsCovs=list(visit=visitMat))
summary(umf)
y
apply(y,1,sum)
?`summary,unmarkedFrameOccuMulti-method`
?unmarkedFramePCount
summary(umf)
?pcount
# Fit a model (Royle's orig N-mix mod)
fm1 <- pcount(~visit-1 ~ x1, umf, K=50)
# Fit a model (Royle's orig N-mix mod)
fm1 <- pcount(~visit-1 ~ x, umf, K=50)
fm1
plogis(-.625)
plogis(2.579)
coef(fm1, type="det")
plogis(coef(fm1, type="det"))
ranef(fm1)
?`ranef,unmarkedFitPCount-method`
(fm1re <- ranef(fm1))
source("C:/Users/Kevin/Downloads/Test_unmarked.R", echo=TRUE)
# Empirical Bayes estimation of random effects
?`ranef,unmarkedFitPCount-method`  # learn more about this
(fm1re <- ranef(fm1))     # estimates of true abundance with conf int for each site
plot(fm1re, subset=site %in% 1:25, xlim=c(-1,40))
plot(fm1re, subset=site %in% 25:1, xlim=c(-1,40))
plot(fm1re, subset=site %in% 1:25, xlim=c(-1,40))
plot(fm1re, subset=site %in% 1:24, xlim=c(-1,40))
sum(bup(fm1re))         # Estimated population size
fm1re
sum(bup(fm1re))         # Estimated population size
sum(N)                  # Actual population size
# Real data
data(mallard)
mallardUMF <- unmarkedFramePCount(mallard.y, siteCovs = mallard.site,
obsCovs = mallard.obs)
mallardUMF
(fm.mallard <- pcount(~ ivel+ date + I(date^2) ~ length + elev + forest, mallardUMF, K=30))
mallard.site
mallard.obs
length(mallard.obs)
length(mallard.obs
mallard.obs$ivel
mallardUMF <- unmarkedFramePCount(mallard.y, siteCovs = mallard.site,
obsCovs = mallard.obs)
?gpcount
set.seed(54)
nSites <- 24
nVisits <- 2
nReps <- 3
nSites <- 24
nVisits <- 2
nReps <- 3
lambda <- 5   # avg. superpopulation abundance
phi <- 0.7   # availability parameter (fraction of "superpop" that's available for capture at any given visit)
p <- 0.5    # detection process- fraction of the available individuals that are captured at each site/visit
M <- rpois(nSites, lambda) # super-population size
M
N <- matrix(NA, nSites, nVisits)  # matrix of availability (site X visit)
N
N <- matrix(NA, nSites, nVisits)  # matrix of availability (site X visit)
y <- array(NA, c(nSites, nReps, nVisits))  # 3-d array
#  Create fake data
M <- rpois(nSites, lambda) # super-population size
# total availabiliaty
N <- matrix(NA, nSites, nVisits)  # matrix of availability (site X visit)
for(i in 1:nVisits) {
N[,i] <- rbinom(nSites, M, phi) # population available during vist j
}
colMeans(N)
N
colMeans(N)
# simulated number of detections
y <- array(NA, c(nSites, nReps, nVisits))  # 3-d array
for(i in 1:nSites) {
for(j in 1:nVisits) {
y[i,,j] <- rbinom(nReps, N[i,j], p)
}
}
y
## prepare the data for putting in the 'frame'
ym <- matrix(y, nSites)
ym
y[1,,]
ym[1,] <- NA
ym[2, 1:nReps] <- NA
ym[3, (nReps+1):(nReps+nReps)] <- NA
ym
## put the data in the unmarked frame
umf <- unmarkedFrameGPC(y=ym, numPrimary=nVisits)
## put the data in the unmarked frame
umf <- unmarkedFrameGPC(y=ym, numPrimary=nVisits)
## Not run:
fmu <- gpcount(~1, ~1, ~1, umf, K=40, control=list(trace=TRUE, REPORT=1))
backTransform(fmu, type="lambda")
backTransform(fmu, type="phi")     #
backTransform(fmu, type="det")     # detection
backTransform(fmu, type="lambda")   # superpop in real estims
backTransform(fmu, type="phi")     # availability
backTransform(fmu, type="det")     # detection
shiny::runApp('C:/Users/Kevin/Documents/ShinyTest/test2')
setwd("C:\\Users\\Kevin\\Dropbox\\GopherTortoise\\Analysis\\PVA\\Rcode\\setup_files")
library(terra)
rast("initabund.tif")
init = rast("initabund.tif")
sum(init)
need <- sum(init)
writeRaster(need,"GT_init.tif")
